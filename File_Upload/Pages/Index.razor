@page "/"
@using File_Upload.Services;
@inject IFileUpload fileUpload;

<div class="col-6">
    <h1>File Upload in Blazor</h1>
    <div class="form-group">
        <InputFile OnChange="OnInputFileChange" multiple></InputFile>
        <button class="btn btn-sm btn-success" type="button" 
        @onclick="UploadFiles">Upload</button>
        <br /><br />
        @{
            var progressCss = "progress" + (displayProgress ? "" : "d-none");
            var progrssWdithStyle = progressPercent + "%";
        }

        <div class="@progressCss">
            <div class="progress-bar" role="progressbar"
            style="width:@progrssWdithStyle" area-valuenow="@progressPercent"
            area-minvalue="0" area-valuemax="100">

            </div>
        </div>

    </div>
    <br />
    <label>@labelText</label>
    <br />
</div>

@if (uploadedFiles.Count > 0)
{
    <h3>Selected Files</h3>
    <div class="card">
        <div class="row align-items-start">
            @foreach (var file in uploadedFiles)
            {
                <div class="col-2">
                    <img src=@file class="rounded float-left" width="100" height="100"/>
                </div>
            }
        </div>
    </div>
}

@code {
    private bool displayProgress;
    private int progressPercent;

    private IReadOnlyList<IBrowserFile>? selectedFiles = null;
    private IList<string> uploadedFiles = new List<string>();

    private string labelText = "";

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        foreach(var file in selectedFiles)
        {
            var imageUrl = await fileUpload.GeneratePreviewUrl(file);
            uploadedFiles.Add(imageUrl);
        }
    }

    private async Task UploadFiles()
    {
        try
        {
            if (selectedFiles is not null && selectedFiles.Count > 0)
            {
                var uploaded = 0;
                displayProgress = true;

                foreach(var file in selectedFiles)
                {
                    await fileUpload.UploadFile(file);

                    uploaded++;
                    progressPercent = (uploaded * 100) / selectedFiles.Count;
                }

                Thread.Sleep(1000);
                displayProgress = false;
                labelText = $"Upload of {selectedFiles.Count} file(s) successful";
            }
        }
        catch(Exception ex)
        {
            labelText = $"Upload failes due to {ex.Message}";
        }
    }
}